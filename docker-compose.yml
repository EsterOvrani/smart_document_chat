version: '3.8'

services:
  # ==================== PostgreSQL ====================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-smart-doc-chat
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: smartdocumentchat
      POSTGRES_USER: smartdoc_user
      POSTGRES_PASSWORD: smartdoc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartdoc_user -d smartdocumentchat"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # ==================== Qdrant Vector Database ====================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-smart-doc-chat
    ports:
      - "6333:6333"      # REST API
      - "6334:6334"      # gRPC API
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - app-network



  # ==================== Backend (Spring Boot) ====================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spring-backend
    env_file:
      - ./backend/.env
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smartdocumentchat
      SPRING_DATASOURCE_USERNAME: smartdoc_user
      SPRING_DATASOURCE_PASSWORD: smartdoc_password
      
      # Qdrant
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6334
    
      # Frontend URL
      FRONTEND_URL: http://localhost
      

      
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started

    networks:
      - app-network
    restart: unless-stopped

  # ==================== Frontend (React) ====================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # ==================== Nginx (Reverse Proxy) ====================
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

# ==================== Networks ====================
networks:
  app-network:
    driver: bridge

# ==================== Volumes ====================
volumes:
  postgres_data:
    driver: local
  qdrant_storage:
    driver: local
